import { ParsedLocation } from './location.cjs';
import { DeferredPromiseState } from './defer.cjs';
import { ControlledPromise } from './utils.cjs';
export interface ViewTransitionOptions {
    types: Array<string>;
}
export declare function defaultSerializeError(err: unknown): {
    name: string;
    message: string;
} | {
    data: unknown;
};
export interface ExtractedBaseEntry {
    dataType: '__beforeLoadContext' | 'loaderData';
    type: string;
    path: Array<string>;
    id: number;
    matchIndex: number;
}
export interface ExtractedStream extends ExtractedBaseEntry {
    type: 'stream';
    streamState: StreamState;
}
export interface ExtractedPromise extends ExtractedBaseEntry {
    type: 'promise';
    promiseState: DeferredPromiseState<any>;
}
export type ExtractedEntry = ExtractedStream | ExtractedPromise;
export type StreamState = {
    promises: Array<ControlledPromise<string | null>>;
};
export type TrailingSlashOption = 'always' | 'never' | 'preserve';
export declare function getLocationChangeInfo(routerState: {
    resolvedLocation?: ParsedLocation;
    location: ParsedLocation;
}): {
    fromLocation: ParsedLocation<{}> | undefined;
    toLocation: ParsedLocation<{}>;
    pathChanged: boolean;
    hrefChanged: boolean;
    hashChanged: boolean;
};
